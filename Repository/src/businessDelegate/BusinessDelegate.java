package businessDelegate;import java.rmi.Naming;import java.rmi.RemoteException;import java.util.Date;import java.util.List;import dto.*;import exceptions.*;import interfaces.IController;public class BusinessDelegate implements IController {	private static BusinessDelegate instancia = null;	private IController objetoRemoto;	public static BusinessDelegate getInstancia() {		if (instancia == null) {			instancia = new BusinessDelegate();		}		return instancia;	}	public BusinessDelegate() {		try {			objetoRemoto = (IController) Naming.lookup("//localhost/objetoRemoto");		} catch (Exception e) {			e.printStackTrace();		}	}	// @Override	public List<SucursalDTO> listarSucursales() throws RemoteException {		return objetoRemoto.listarSucursales();	}	public void agregarCliente(ClienteDTO c) throws RemoteException, ExceptionCliente {		objetoRemoto.agregarCliente(c);	}	public void actualizarCliente(ClienteDTO c) throws RemoteException, ExceptionCliente {		objetoRemoto.actualizarCliente(c);	}	public ClienteDTO recuperarCliente(Integer i) throws RemoteException, ExceptionCliente {		return objetoRemoto.recuperarCliente(i);	}	public List<ClienteDTO> listarClientes() throws RemoteException, ExceptionCliente {		return objetoRemoto.listarClientes();	}	public void agregarEmpleado(EmpleadoDTO e) throws RemoteException, ExceptionCliente {		objetoRemoto.agregarEmpleado(e);	}	public void actualizarEmpleado(EmpleadoDTO e) throws RemoteException, ExceptionCliente {		objetoRemoto.actualizarEmpleado(e);	}	public EmpleadoDTO recuperarEmpleado(Integer i) throws RemoteException {		return objetoRemoto.recuperarEmpleado(i);	}	public List<EmpleadoDTO> listarEmpleados() throws RemoteException, ExceptionCliente {		return objetoRemoto.listarEmpleados();	}	public void agregarSucursal(SucursalDTO sucursal) throws RemoteException {		objetoRemoto.agregarSucursal(sucursal);	}	public void agregarMaterial(MaterialDTO m) throws RemoteException {		objetoRemoto.agregarMaterial(m);	}	@Override	public void actualizarMaterial(MaterialDTO m) throws RemoteException {		objetoRemoto.actualizarMaterial(m);	}	@Override	public MaterialDTO recuperarMaterial(Integer i) throws RemoteException {		return objetoRemoto.recuperarMaterial(i);	}	@Override	public List<MaterialDTO> listarMateriales() throws RemoteException {		return objetoRemoto.listarMateriales();	}	@Override	public void eliminarEmpleado(Integer idEmpleado) throws RemoteException {		objetoRemoto.eliminarEmpleado(idEmpleado);	}	@Override	public void agregarPrenda(PrendaDTO prenda) throws RemoteException {		objetoRemoto.agregarPrenda(prenda);	}	@Override	public Integer recuperarStock(Integer idPrenda) throws RemoteException {		return objetoRemoto.recuperarStock(idPrenda);	}	@Override	public void asignarEncargado(Integer idSucursal, Integer idEmpleado) throws RemoteException {		objetoRemoto.asignarEncargado(idSucursal, idEmpleado);	}	@Override	public SucursalDTO recuperarSucursal(Integer idSucursal) throws RemoteException {		return objetoRemoto.recuperarSucursal(idSucursal);	}	@Override	public void actualizarSucursal(SucursalDTO sucursal) throws RemoteException {		objetoRemoto.actualizarSucursal(sucursal);	}	@Override	public void eliminarSucursal(Integer idSucursal) throws RemoteException {		objetoRemoto.eliminarSucursal(idSucursal);	}	@Override	public void eliminarCliente(Integer idCliente) throws RemoteException {		objetoRemoto.eliminarCliente(idCliente);	}	@Override	public void agregarAreaProductiva(AreaProductivaDTO area) throws RemoteException {		objetoRemoto.agregarAreaProductiva(area);	}	@Override	public Integer validarCliente(String usuario, String contraseña)			throws RemoteException {				return objetoRemoto.validarCliente(usuario, contraseña);	}	@Override	public List<PrendaDTO> listarPrendas() throws RemoteException {		return objetoRemoto.listarPrendas();	}			public PedidoDTO generarPedido(List<ItemPedidoDTO> itemsPedido, String fechaGeneracion, 			Integer idCliente, Integer idSucursal,float valor, String estado) throws ExceptionCliente, RemoteException{		return objetoRemoto.generarPedido(itemsPedido, fechaGeneracion, idCliente, idSucursal,valor, estado);			}	@Override	public List<PedidoDTO> listarPedidoEstado(String estado) throws RemoteException {		return objetoRemoto.listarPedidoEstado(estado);	}	@Override	public Integer validarEmpleado(String usuario, String contraseña) throws RemoteException {		return objetoRemoto.validarEmpleado(usuario, contraseña);	}	@Override	public Date aprobarPedido(Integer idPedido) throws RemoteException {		return objetoRemoto.aprobarPedido(idPedido);	}	@Override	public Integer obtenerStock(Integer idPrenda) throws RemoteException {				return objetoRemoto.obtenerStock(idPrenda);	}	@Override	public PedidoDTO obtenerPedido(Integer idPedido) throws RemoteException {				return objetoRemoto.obtenerPedido(idPedido);	}	@Override	public List<PedidoDTO> obtenerPedidosPendientesAreaComercial() throws RemoteException {		return objetoRemoto.obtenerPedidosPendientesAreaComercial();	}	@Override	public float chequearCredito(Integer idCliente) throws ExceptionCliente {		return objetoRemoto.chequearCredito(idCliente);	}}