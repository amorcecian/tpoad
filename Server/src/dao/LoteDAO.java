package dao;import hbt.HibernateUtil;import negocio.LineaProductiva;import negocio.Lote;import org.hibernate.Query;import org.hibernate.SessionFactory;import org.hibernate.classic.Session;import entities.LineaProductivaEntity;import entities.LoteEntity;public class LoteDAO {	private static LoteDAO instancia;	private static SessionFactory sf;	public static LoteDAO getInstancia() {		if (instancia == null) {			instancia = new LoteDAO();			sf = HibernateUtil.getSessionFactory();		}		return instancia;	}	public LoteEntity toEntity(Lote lote) {		LoteEntity le = new LoteEntity();		le.setActivo(lote.isActivo());		le.setCantidadProducida(lote.getCantidadProducida());		le.setCantidadRestante(lote.getCantidadRestante());		le.setCostoProd(lote.getCostoProd());		le.setEstado(lote.getEstado());		/*		if(lote.getPrenda()!=null){			le.setPrenda(PrendaDAO.getInstance().toEntity(lote.getPrenda()));		}*/		// le.setAreaProductiva(AreaProductivaDAO.getInstancia().toEntity(lote.get));		//le.setOrdenDeProduccion(Orde);		return le;	}			public Lote toNegocio(LoteEntity lote) {		Lote l = new Lote();		l.setActivo(lote.isActivo());		l.setCantidadProducida(lote.getCantidadProducida());		l.setCantidadRestante(lote.getCantidadRestante());		l.setCostoProd(lote.getCostoProd());		l.setEstado(lote.getEstado());		l.setIdLote(lote.getIdLote());		return l;	}	public void actualizarLote(Lote lote) {		Session s = sf.openSession();		LoteEntity le = toEntity(lote);		s.update(le);		s.flush();		s.beginTransaction().commit();		s.close();	}	public void guardarLote(Lote nuevo) {		LoteEntity le = toEntity(nuevo);		Session session = sf.openSession();		session.save(le);		session.flush();		session.close();	}		public Lote obtenerLote(Integer idLote) {				Session s = sf.openSession();		Lote l = new Lote();		Query q = s.createQuery("FROM LoteEntity WHERE idLote=?").setInteger(0, idLote);		LoteEntity lote = (LoteEntity) q.uniqueResult();		l = toNegocio(lote);		s.close();		return l;	}}